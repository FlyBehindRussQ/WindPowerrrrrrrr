from functions import Functions
from imports import *

class Windows(Functions):
    def __init__(self, parent=None) -> None:
        # super(Functions,self).__init__(parent)
        pass
    
    def filter_setting_window(self):
        Widget = QtWidgets.QDialog(self)
        Widget.resize(300, 270)
        Widget.setWindowTitle("筛除设置")
        font = QFont()
        font.setPointSize(15)
        sizePolicy = QtWidgets.QSizePolicy()
        sizePolicy.setHorizontalPolicy(QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setVerticalPolicy(QtWidgets.QSizePolicy.Expanding)
        centralwidget = QtWidgets.QWidget(Widget)
        gridLayout_central = QtWidgets.QGridLayout(centralwidget)

        cut_in_text = QtWidgets.QLabel(centralwidget)
        cut_in_text.setFont(font)
        cut_in_text.setText("切入风速：")
        cut_in_text.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(cut_in_text,0,0,1,2)

        self.speed_input_cut_in = QtWidgets.QLineEdit(centralwidget)
        self.speed_input_cut_in.setFont(font)
        self.speed_input_cut_in.setText(str(data.stage_speed_thresholds[0]))
        self.speed_input_cut_in.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(self.speed_input_cut_in,0,2,1,2)

        cut_off_text = QtWidgets.QLabel(centralwidget)
        cut_off_text.setFont(font)
        cut_off_text.setText("切出风速：")
        cut_off_text.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(cut_off_text,1,0,1,2)

        self.speed_input_cut_off = QtWidgets.QLineEdit(centralwidget)
        self.speed_input_cut_off.setFont(font)
        self.speed_input_cut_off.setText(str(data.stage_speed_thresholds[1]))
        self.speed_input_cut_off.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(self.speed_input_cut_off,1,2,1,2)

        input_label_text = QtWidgets.QLabel(centralwidget)
        input_label_text.setFont(font)
        input_label_text.setText("------自定义筛除------")
        input_label_text.setSizePolicy(sizePolicy)
        input_label_text.setAlignment(Qt.AlignHCenter)
        gridLayout_central.addWidget(input_label_text,2,0,1,4)
        
        speed1_text = QtWidgets.QLabel(centralwidget)
        speed1_text.setFont(font)
        speed1_text.setText("风速1：")
        speed1_text.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(speed1_text,3,0,1,2)

        self.speed_input1 = QtWidgets.QLineEdit(centralwidget)
        self.speed_input1.setFont(font)
        self.speed_input1.setText(str(data.stage_speed_custom_ranges[0]))
        self.speed_input1.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(self.speed_input1,3,2,1,1)

        self.speed_input2 = QtWidgets.QLineEdit(centralwidget)
        self.speed_input2.setFont(font)
        self.speed_input2.setText(str(data.stage_speed_custom_ranges[1]))
        self.speed_input2.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(self.speed_input2,3,3,1,1)

        power1_text = QtWidgets.QLabel(centralwidget)
        power1_text.setFont(font)
        power1_text.setText("功率1：")
        power1_text.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(power1_text,4,0,1,2)

        self.power_input1 = QtWidgets.QLineEdit(centralwidget)
        self.power_input1.setFont(font)
        self.power_input1.setText(str(data.stage_power_custom_ranges[0]))
        self.power_input1.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(self.power_input1,4,2,1,1)

        self.power_input2 = QtWidgets.QLineEdit(centralwidget)
        self.power_input2.setFont(font)
        self.power_input2.setText(str(data.stage_power_custom_ranges[1]))
        self.power_input2.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(self.power_input2,4,3,1,1)

        speed2_text = QtWidgets.QLabel(centralwidget)
        speed2_text.setFont(font)
        speed2_text.setText("风速2：")
        speed2_text.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(speed2_text,5,0,1,2)

        self.speed_input3 = QtWidgets.QLineEdit(centralwidget)
        self.speed_input3.setFont(font)
        self.speed_input3.setText(str(data.stage_speed_custom_ranges[2]))
        self.speed_input3.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(self.speed_input3,5,2,1,1)

        self.speed_input4 = QtWidgets.QLineEdit(centralwidget)
        self.speed_input4.setFont(font)
        self.speed_input4.setText(str(data.stage_speed_custom_ranges[3]))
        self.speed_input4.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(self.speed_input4,5,3,1,1)

        power2_text = QtWidgets.QLabel(centralwidget)
        power2_text.setFont(font)
        power2_text.setText("功率2：")
        power2_text.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(power2_text,6,0,1,2)

        self.power_input3 = QtWidgets.QLineEdit(centralwidget)
        self.power_input3.setFont(font)
        self.power_input3.setText(str(data.stage_power_custom_ranges[2]))
        self.power_input3.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(self.power_input3,6,2,1,1)

        self.power_input4 = QtWidgets.QLineEdit(centralwidget)
        self.power_input4.setFont(font)
        self.power_input4.setText(str(data.stage_power_custom_ranges[3]))
        self.power_input4.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(self.power_input4,6,3,1,1)

        self.comfirm_button = QtWidgets.QPushButton(centralwidget)
        self.comfirm_button.setSizePolicy(sizePolicy)
        self.comfirm_button.setFont(font)
        self.comfirm_button.setText("开始筛除")
        gridLayout_central.addWidget(self.comfirm_button,7,0,1,4)

        self.comfirm_button.clicked.connect(self.set_filter_params)
        self.comfirm_button.clicked.connect(Widget.close)
        
        Widget.setLayout(gridLayout_central)
        Widget.exec_()

    def set_filter_params(self):
        data.stage_speed_thresholds[0] = float(self.speed_input_cut_in.text())
        data.stage_speed_thresholds[1] = float(self.speed_input_cut_off.text())     
        data.stage_speed_custom_ranges[0] = float(self.speed_input1.text())
        data.stage_speed_custom_ranges[1] = float(self.speed_input2.text())
        data.stage_speed_custom_ranges[2] = float(self.speed_input3.text())
        data.stage_speed_custom_ranges[3] = float(self.speed_input4.text())
        data.stage_power_custom_ranges[0] = float(self.power_input1.text())
        data.stage_power_custom_ranges[1] = float(self.power_input2.text())
        data.stage_power_custom_ranges[2] = float(self.power_input3.text())
        data.stage_power_custom_ranges[3] = float(self.power_input4.text())
        self.show_setting()
        self.filter()
        self.sender().parent().close()
        
    
    def train_setting_window(self):
        Widget = QtWidgets.QDialog(self)
        Widget.resize(360,180)
        Widget.setWindowTitle("训练设置")
        font = QFont()
        font.setPointSize(15)
        sizePolicy = QtWidgets.QSizePolicy()
        sizePolicy.setHorizontalPolicy(QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setVerticalPolicy(QtWidgets.QSizePolicy.Expanding)
        centralwidget = QtWidgets.QWidget(Widget)
        gridLayout_central = QtWidgets.QGridLayout(centralwidget)
        
        input_method1_text = QtWidgets.QLabel(centralwidget)
        input_method1_text.setFont(font)
        input_method1_text.setText("残差训练：")
        input_method1_text.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(input_method1_text,0,0,1,2)
        
        self.input_method1_box = QtWidgets.QComboBox(centralwidget)
        self.input_method1_box.setFont(font)
        self.input_method1_box.addItems(['LSTM'])
        self.input_method1_box.setCurrentIndex(0)
        self.input_method1_box.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(self.input_method1_box,0,2,1,1)

        input_method2_text = QtWidgets.QLabel(centralwidget)
        input_method2_text.setFont(font)
        input_method2_text.setText("季节训练：")
        input_method2_text.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(input_method2_text,1,0,1,2)
        
        self.input_method2_box = QtWidgets.QComboBox(centralwidget)
        self.input_method2_box.setFont(font)
        self.input_method2_box.addItems(['ARIMA'])
        self.input_method2_box.setCurrentIndex(0)
        self.input_method2_box.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(self.input_method2_box,1,2,1,1)
        
        input_method2_text = QtWidgets.QLabel(centralwidget)
        input_method2_text.setFont(font)
        input_method2_text.setText("趋势训练：")
        input_method2_text.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(input_method2_text,2,0,1,2)
        
        self.input_method2_box = QtWidgets.QComboBox(centralwidget)
        self.input_method2_box.setFont(font)
        self.input_method2_box.addItems(['Regression'])
        self.input_method2_box.setCurrentIndex(0)
        self.input_method2_box.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(self.input_method2_box,2,2,1,1)

        input_epochs_text = QtWidgets.QLabel(centralwidget)
        input_epochs_text.setFont(font)
        input_epochs_text.setText("模型训练次数：")
        input_epochs_text.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(input_epochs_text,0,6,1,2)
        
        self.input_epochs_edit = QtWidgets.QLineEdit(centralwidget)
        self.input_epochs_edit.setFont(font)
        self.input_epochs_edit.setText(str(data.epochs))
        self.input_epochs_edit.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(self.input_epochs_edit,0,8,1,2)
        
        input_layers_text = QtWidgets.QLabel(centralwidget)
        input_layers_text.setFont(font)
        input_layers_text.setText("神经网络层数：")
        input_layers_text.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(input_layers_text,1,6,1,2)
        
        self.input_layers_box1 = QtWidgets.QComboBox(centralwidget)
        self.input_layers_box1.setFont(font)
        self.input_layers_box1.addItems(['8','16','32','64'])
        self.input_layers_box1.setCurrentIndex(['8','16','32','64'].index(str(data.hidden_dim[0])))
        self.input_layers_box1.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(self.input_layers_box1,1,8,1,1)
        
        self.input_layers_box2 = QtWidgets.QComboBox(centralwidget)
        self.input_layers_box2.setFont(font)
        self.input_layers_box2.addItems(['8','16','32','64'])
        self.input_layers_box2.setCurrentIndex(['8','16','32','64'].index(str(data.hidden_dim[1])))
        self.input_layers_box2.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(self.input_layers_box2,1,9,1,1)
        
        input_data_text = QtWidgets.QLabel(centralwidget)
        input_data_text.setFont(font)
        input_data_text.setText("训练数据量：")
        input_data_text.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(input_data_text,2,6,1,2)
        
        self.input_data_edit = QtWidgets.QLineEdit(centralwidget)
        self.input_data_edit.setFont(font)
        self.input_data_edit.setText(str(data.train_size))
        self.input_data_edit.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(self.input_data_edit,2,8,1,2)
        
        input_ratio_text = QtWidgets.QLabel(centralwidget)
        input_ratio_text.setFont(font)
        input_ratio_text.setText("训练集占比：")
        input_ratio_text.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(input_ratio_text,3,6,1,2)
        
        self.input_ratio_edit = QtWidgets.QLineEdit(centralwidget)
        self.input_ratio_edit.setFont(font)
        self.input_ratio_edit.setText(str(data.train_ratio))
        self.input_ratio_edit.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(self.input_ratio_edit,3,8,1,2)
        
        self.comfirm_button = QtWidgets.QPushButton(centralwidget)
        self.comfirm_button.setSizePolicy(sizePolicy)
        self.comfirm_button.setFont(font)
        self.comfirm_button.setText("保存设置")
        gridLayout_central.addWidget(self.comfirm_button,4,1,2,8)
        
        self.comfirm_button.clicked.connect(self.set_train_params)
        self.comfirm_button.clicked.connect(Widget.close)
        
        Widget.setLayout(gridLayout_central)
        Widget.exec_()
        
    def set_train_params(self):
        data.epochs = int(self.input_epochs_edit.text())  
        data.hidden_dim[0] = int(self.input_layers_box1.currentText())
        data.hidden_dim[1] = int(self.input_layers_box2.currentText())
        data.train_size = int(self.input_data_edit.text())
        data.train_ratio = float(self.input_ratio_edit.text())
        self.show_setting()
        
    def predict_setting_window(self):
        Widget = QtWidgets.QDialog(self)
        Widget.resize(360,400)
        Widget.setWindowTitle("模型预测")
        font = QFont()
        font.setPointSize(15)
        sizePolicy = QtWidgets.QSizePolicy()
        sizePolicy.setHorizontalPolicy(QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setVerticalPolicy(QtWidgets.QSizePolicy.Expanding)
        centralwidget = QtWidgets.QWidget(Widget)
        gridLayout_central = QtWidgets.QGridLayout(centralwidget)
        
        input_label_text = QtWidgets.QLabel(centralwidget)
        input_label_text.setFont(font)
        input_label_text.setText("=====输入数据=====")
        input_label_text.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(input_label_text,0,1,1,2)

        input_speednow_text = QtWidgets.QLabel(centralwidget)
        input_speednow_text.setFont(font)
        input_speednow_text.setText("瞬时风速")
        input_speednow_text.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(input_speednow_text,1,0,1,2)

        self.input_speednow_edit = QtWidgets.QLineEdit(centralwidget)
        self.input_speednow_edit.setFont(font)
        self.input_speednow_edit.setText(str(data.speed_now))
        self.input_speednow_edit.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(self.input_speednow_edit,1,2,1,2)
        
        input_speedsec_text = QtWidgets.QLabel(centralwidget)
        input_speedsec_text.setFont(font)
        input_speedsec_text.setText("30s平均风速")
        input_speedsec_text.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(input_speedsec_text,2,0,1,2)

        self.input_speedsec_edit = QtWidgets.QLineEdit(centralwidget)
        self.input_speedsec_edit.setFont(font)
        self.input_speedsec_edit.setText(str(data.speed_sec))
        self.input_speedsec_edit.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(self.input_speedsec_edit,2,2,1,2)

        input_speedmin_text = QtWidgets.QLabel(centralwidget)
        input_speedmin_text.setFont(font)
        input_speedmin_text.setText("10min滑动平均风速")
        input_speedmin_text.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(input_speedmin_text,3,0,1,2)

        self.input_speedmin_edit = QtWidgets.QLineEdit(centralwidget)
        self.input_speedmin_edit.setFont(font)
        self.input_speedmin_edit.setText(str(data.speed_min))
        self.input_speedmin_edit.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(self.input_speedmin_edit,3,2,1,2)

        input_direction_text = QtWidgets.QLabel(centralwidget)
        input_direction_text.setFont(font)
        input_direction_text.setText("风向角")
        input_direction_text.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(input_direction_text,4,0,1,2)

        self.input_direction_edit = QtWidgets.QLineEdit(centralwidget)
        self.input_direction_edit.setFont(font)
        self.input_direction_edit.setText(str(data.direction))
        self.input_direction_edit.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(self.input_direction_edit,4,2,1,2)

        input_temperature_text = QtWidgets.QLabel(centralwidget)
        input_temperature_text.setFont(font)
        input_temperature_text.setText("温度")
        input_temperature_text.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(input_temperature_text,5,0,1,2)

        self.input_temperature_edit = QtWidgets.QLineEdit(centralwidget)
        self.input_temperature_edit.setFont(font)
        self.input_temperature_edit.setText(str(data.temperature))
        self.input_temperature_edit.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(self.input_temperature_edit,5,2,1,2)

        input_pitchangle_text = QtWidgets.QLabel(centralwidget)
        input_pitchangle_text.setFont(font)
        input_pitchangle_text.setText("桨距角")
        input_pitchangle_text.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(input_pitchangle_text,6,0,1,2)

        self.input_pitchangle_edit = QtWidgets.QLineEdit(centralwidget)
        self.input_pitchangle_edit.setFont(font)
        self.input_pitchangle_edit.setText(str(data.pitch_angle))
        self.input_pitchangle_edit.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(self.input_pitchangle_edit,6,2,1,2)

        self.start_predict_button = QtWidgets.QPushButton(centralwidget)
        self.start_predict_button.setFont(font)
        self.start_predict_button.setText("开始预测")
        self.start_predict_button.setSizePolicy(sizePolicy)
        gridLayout_central.addWidget(self.start_predict_button,7,0,1,4)
        
        self.status_column = QtWidgets.QLineEdit(centralwidget)
        self.status_column.setSizePolicy(sizePolicy)
        self.status_column.setReadOnly(True)
        gridLayout_central.addWidget(self.status_column,8,0,1,4)

        self.start_predict_button.clicked.connect(self.set_predict_params)
       
        Widget.setLayout(gridLayout_central)
        Widget.exec_()
        
    def set_predict_params(self):
        data.speed_now= float(self.input_speednow_edit.text())  
        data.speed_sec = float(self.input_speedsec_edit.text())
        data.speed_min = float(self.input_speedmin_edit.text())
        data.direction = float(self.input_direction_edit.text())
        data.temperature = float(self.input_temperature_edit.text())
        data.pitch_angle = float(self.input_pitchangle_edit.text())

        data.input_x = np.array(np.array([data.speed_now,data.speed_sec,data.speed_min,data.direction,data.temperature,data.pitch_angle]))

        data.output_y = data.model.predict(data.input_x)

        self.dial('cls')
        self.dial(f'''预测结果: {data.output_y}w''')
        print(data.output_y)
        self.show_setting()
        